npass <- pbp %>%
filter(play_type == 'pass',
season_type == 'REG') %>%
group_by(passer_player_id) %>%
dplyr::summarise(
num_plays = n()
); pbp<-merge(pbp,npass,by='passer_player_id',all.x = T,no.dups = T)
pbp_mut<-pbp%>%
dplyr::filter(
play_type == 'pass',
season_type == 'REG',
wp >= .20,
wp <= .80,
game_half != 'Overtime',
!is.na(epa),
num_plays >= 100,
!is.na(down),
penalty == 0
)%>%
dplyr::mutate(
pos_coach = if_else(posteam==home_team,home_coach,away_coach)
,
def_coach = if_else(defteam==home_team,home_coach,away_coach)
,
team = paste(season,posteam,sep='_')
,
def_team = paste(season,defteam,sep='_')
)   %>%
select(epa,passer_player_id,pos_coach,def_coach,team,wp,def_team,season)
saveRDS(pbp_mut,'~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS')
pff<-read.csv("~/pff_grades_seas.csv")
pff['POSC'] <- pff['RECV']*.85 + pff['PBLK']*.15
pff['PDSC'] <- pff['Cov']*.60 + pff['PRSH']*.40
pff<-pff  %>%
arrange(Year,desc(POSC))
rank <- pff %>% select(Year,Team_abr,POSC)%>%
arrange(Year,desc(POSC)) %>% group_by(Year) %>%
summarise(
POSC_rank = 1:32) %>% ungroup()
pff<-cbind(pff,rank %>% select(POSC_rank))
sup_pass <- pff %>% select(POSC,POSC_rank,team = key)
pff<-pff  %>%
arrange(Year,desc(PDSC))
rank <- pff %>% select(Year,Team_abr,PDSC)%>%
arrange(Year,desc(PDSC)) %>% group_by(Year) %>%
summarise(
PDSC_rank = 1:32) %>% ungroup()
pff<-cbind(pff,rank %>% select(PDSC_rank))
def_pass <- pff %>% select(PDSC,PDSC_rank,def_team = key)
pbp_mut<-readRDS('~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS')
pbp_mut <- pbp_mut %>% filter(season >= 2006)
pbp_mut=merge(x=pbp_mut,y=sup_pass,by='team',how='left',no.dups = T)
pbp_mut=merge(x=pbp_mut,y=def_pass,by='def_team',how='left',no.dups = T)
pbp_mut
saveRDS(pbp_mut,'~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS')
library(lme4)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggthemes)
library(parallel)
sample<-readRDS('~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS') %>%
select(epa,POSC_rank,PDSC_rank,passer_player_id,wp)
# Function --------------------------------------------------------
sampler <- function(dat, clustervar, replace = TRUE, reps = 1) {
cid <- unique(dat[, clustervar[1]])
ncid <- length(cid)
recid <- sample(cid, size = ncid * reps, replace = TRUE)
if (replace) {
rid <- lapply(seq_along(recid), function(i) {
cbind(NewID = i, RowID = sample(which(dat[, clustervar] == recid[i]),
size = length(which(dat[, clustervar] == recid[i])), replace = TRUE))
})
} else {
rid <- lapply(seq_along(recid), function(i) {
cbind(NewID = i, RowID = which(dat[, clustervar] == recid[i]))
})
}
dat <- as.data.frame(do.call(rbind, rid))
dat$Replicate <- factor(cut(dat$NewID, breaks = c(1, ncid * 1:reps), include.lowest = TRUE,
labels = FALSE))
dat$NewID <- factor(dat$NewID)
return(dat)
}
# Read data --------------------------------------------------------
sample<-readRDS('~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS') %>%
select(epa,POSC_rank,PDSC_rank,passer_player_id,wp,poscoach)
# Read data --------------------------------------------------------
sample<-readRDS('~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS') %>%
select(epa,POSC_rank,PDSC_rank,passer_player_id,wp,pos_coach)
sample
start_time <- Sys.time(); mixed_model<-sample %>%
lmer(formula=
epa ~
wp +
(1|pos_coach) +
(1|pos_coach:passer_player_id)+
(1|pos_coach:POSC_rank)+
(1|pos_coach:PDSC_rank)
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
);end_time <- Sys.time();end_time - start_time
f <- fixef(mixed_model)
r <- getME(mixed_model, "theta")
r
r
# Model -------------------------------------------------------------------
main_start <- Sys.time()
# index
setwd("~/GitHub/mixed_effects_bootstrapping/approach3/PosCoach")
rm(.Random.seed, envir=globalenv())
start_time <- Sys.time();indx <- sampler(sample, "pos_coach", reps = 10);end_time <- Sys.time();(end_time - start_time)
# resample
start_time <- Sys.time(); resampled_data <- cbind(indx, sample[indx$RowID, ]);end_time <- Sys.time();print(end_time - start_time)
rm(indx)
clus <- makeCluster(4)
start_time <-Sys.time();clusterExport(clus, c("resampled_data", "f", "r"));end_time <- Sys.time();(end_time - start_time)
start_time <-Sys.time();clusterEvalQ(clus, require(lme4));end_time <- Sys.time();(end_time - start_time)
# Bootstrap function ------------------------------------------------------
boot_function <- function(i) {
simu <- try(
lmer(
formula=
epa ~
wp +
(1|pos_coach) +
(1|pos_coach:passer_player_id)+
(1|pos_coach:POSC_rank)+
(1|pos_coach:PDSC_rank)
,
data = resampled_data
,
subset = Replicate == i
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
,
start = list(fixef = f, theta = r)
)
,
silent = TRUE)
if (class(simu) == "try-error")
return(simu)
c(fixef(simu), getME(simu, "theta"))
}
# Run bootstrap -----------------------------------------------------------
start <- Sys.time(); output <- parLapplyLB(clus, X = levels(resampled_data$Replicate), fun = boot_function); end <- Sys.time();(end-start)
#Success rate
success <- sapply(output, is.numeric)
mean(success)
#Stop cluster
stopCluster(clus)
rm(resampled_data)
# Get results -------------------------------------------------------------
final <- do.call(cbind, output[success])
final_transposed<-t(final) %>% data.frame()
coefficients <- final_transposed
time<-stringr::str_split(Sys.time()," ")[[1]][2]
filename <- paste0('results/',stringr::str_replace_all(time,":",""),'_150.RDS')
saveRDS(object=coefficients,file=as.character(filename))
# Plot Results -------------------------------------------------------------
files <- list.files(path = "results");lst = list()
for(fil in files){
df_i <- readRDS(paste0("results/",fil))
print(paste(fil,df_i$pos_coach..Intercept. %>% mean()))
lst[[fil]] <- df_i
}
boot <- dplyr::bind_rows(lst);coach<-data.frame(coef = boot$pos_coach..Intercept.,effect = 'Coach')
ggplot(coach,aes(x=coef,fill=effect))+
geom_density(alpha=.4)+theme_bw()+theme(legend.position = 'top')
print(paste('N samples =',length(coach$coef)))
rm(boot)
main_end <- Sys.time();print(main_end - main_start)
sample
# Read data --------------------------------------------------------
sample<-readRDS('~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS')
sample<-sample %>% select(epa,POSC_rank,PDSC_rank,passer_player_id,wp)
start_time <- Sys.time(); mixed_model<-sample %>%
lmer(formula=
epa ~
wp +
(1|POSC_rank) +
(1|POSC_rank:PDSC_rank)+
(1|POSC_rank:passer_player_id)
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
);end_time <- Sys.time();end_time - start_time
f <- fixef(mixed_model)
r <- getME(mixed_model, "theta")
r
# Read data --------------------------------------------------------
sample<-readRDS('~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS') %>%
select(epa,POSC_rank,PDSC_rank,passer_player_id,wp,pos_coach)
# Function --------------------------------------------------------
sampler <- function(dat, clustervar, replace = TRUE, reps = 1) {
cid <- unique(dat[, clustervar[1]])
ncid <- length(cid)
recid <- sample(cid, size = ncid * reps, replace = TRUE)
if (replace) {
rid <- lapply(seq_along(recid), function(i) {
cbind(NewID = i, RowID = sample(which(dat[, clustervar] == recid[i]),
size = length(which(dat[, clustervar] == recid[i])), replace = TRUE))
})
} else {
rid <- lapply(seq_along(recid), function(i) {
cbind(NewID = i, RowID = which(dat[, clustervar] == recid[i]))
})
}
dat <- as.data.frame(do.call(rbind, rid))
dat$Replicate <- factor(cut(dat$NewID, breaks = c(1, ncid * 1:reps), include.lowest = TRUE,
labels = FALSE))
dat$NewID <- factor(dat$NewID)
return(dat)
}
start_time <- Sys.time(); mixed_model<-sample %>%
lmer(formula=
epa ~
wp +
(1|pos_coach) +
(1|pos_coach:passer_player_id)+
(1|pos_coach:POSC_rank)+
(1|pos_coach:PDSC_rank)
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
);end_time <- Sys.time();end_time - start_time
f
f <- fixef(mixed_model)
r <- getME(mixed_model, "theta")
r
# Model -------------------------------------------------------------------
main_start <- Sys.time()
# index
setwd("~/GitHub/mixed_effects_bootstrapping/approach3/PosCoach")
rm(.Random.seed, envir=globalenv())
start_time <- Sys.time();indx <- sampler(sample, "pos_coach", reps = 150);end_time <- Sys.time();(end_time - start_time)
# resample
start_time <- Sys.time(); resampled_data <- cbind(indx, sample[indx$RowID, ]);end_time <- Sys.time();print(end_time - start_time)
rm(indx)
clus <- makeCluster(4)
start_time <-Sys.time();clusterExport(clus, c("resampled_data", "f", "r"));end_time <- Sys.time();(end_time - start_time)
start_time <-Sys.time();clusterEvalQ(clus, require(lme4));end_time <- Sys.time();(end_time - start_time)
# Bootstrap function ------------------------------------------------------
boot_function <- function(i) {
simu <- try(
lmer(
formula=
epa ~
wp +
(1|pos_coach) +
(1|pos_coach:passer_player_id)+
(1|pos_coach:POSC_rank)+
(1|pos_coach:PDSC_rank)
,
data = resampled_data
,
subset = Replicate == i
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
,
start = list(fixef = f, theta = r)
)
,
silent = TRUE)
if (class(simu) == "try-error")
return(simu)
c(fixef(simu), getME(simu, "theta"))
}
# Run bootstrap -----------------------------------------------------------
start <- Sys.time(); output <- parLapplyLB(clus, X = levels(resampled_data$Replicate), fun = boot_function); end <- Sys.time();(end-start)
#Success rate
success <- sapply(output, is.numeric)
mean(success)
#Stop cluster
stopCluster(clus)
rm(resampled_data)
# Get results -------------------------------------------------------------
final <- do.call(cbind, output[success])
final_transposed<-t(final) %>% data.frame()
coefficients <- final_transposed
time<-stringr::str_split(Sys.time()," ")[[1]][2]
filename <- paste0('results/',stringr::str_replace_all(time,":",""),'_150.RDS')
saveRDS(object=coefficients,file=as.character(filename))
# Plot Results -------------------------------------------------------------
files <- list.files(path = "results");lst = list()
for(fil in files){
df_i <- readRDS(paste0("results/",fil))
print(paste(fil,df_i$pos_coach..Intercept. %>% mean()))
lst[[fil]] <- df_i
}
boot <- dplyr::bind_rows(lst);coach<-data.frame(coef = boot$pos_coach..Intercept.,effect = 'Coach')
ggplot(coach,aes(x=coef,fill=effect))+
geom_density(alpha=.4)+theme_bw()+theme(legend.position = 'top')
print(paste('N samples =',length(coach$coef)))
rm(boot)
main_end <- Sys.time();print(main_end - main_start)
ggplot(coach,aes(x=coef,fill=effect))+
geom_density(alpha=.4)+theme_bw()+theme(legend.position = 'top')
start_time <- Sys.time(); mixed_model<-sample %>%
lmer(formula=
epa ~
wp +
(1|pos_coach) +
(1|pos_coach:passer_player_id)+
(1|pos_coach:PDSC_rank)
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
);end_time <- Sys.time();end_time - start_time
f <- fixef(mixed_model)
r <- getME(mixed_model, "theta")
r
start_time <- Sys.time(); mixed_model<-sample %>%
lmer(formula=
epa ~
wp +
(1|pos_coach) +
(1|pos_coach:passer_player_id)+
(1|pos_coach:PDSC_rank)
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
);end_time <- Sys.time();end_time - start_time
f <- fixef(mixed_model)
r <- getME(mixed_model, "theta")
r
# Model -------------------------------------------------------------------
main_start <- Sys.time()
# index
setwd("~/GitHub/mixed_effects_bootstrapping/approach3/PosCoach")
rm(.Random.seed, envir=globalenv())
start_time <- Sys.time();indx <- sampler(sample, "pos_coach", reps = 10);end_time <- Sys.time();(end_time - start_time)
# resample
start_time <- Sys.time(); resampled_data <- cbind(indx, sample[indx$RowID, ]);end_time <- Sys.time();print(end_time - start_time)
rm(indx)
clus <- makeCluster(4)
start_time <-Sys.time();clusterExport(clus, c("resampled_data", "f", "r"));end_time <- Sys.time();(end_time - start_time)
start_time <-Sys.time();clusterEvalQ(clus, require(lme4));end_time <- Sys.time();(end_time - start_time)
# Bootstrap function ------------------------------------------------------
boot_function <- function(i) {
simu <- try(
lmer(
formula=
epa ~
wp +
(1|pos_coach) +
(1|pos_coach:passer_player_id)+
(1|pos_coach:PDSC_rank)
,
data = resampled_data
,
subset = Replicate == i
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
,
start = list(fixef = f, theta = r)
)
,
silent = TRUE)
if (class(simu) == "try-error")
return(simu)
c(fixef(simu), getME(simu, "theta"))
}
# Run bootstrap -----------------------------------------------------------
start <- Sys.time(); output <- parLapplyLB(clus, X = levels(resampled_data$Replicate), fun = boot_function); end <- Sys.time();(end-start)
#Success rate
success <- sapply(output, is.numeric)
mean(success)
#Stop cluster
stopCluster(clus)
rm(resampled_data)
# Get results -------------------------------------------------------------
final <- do.call(cbind, output[success])
final_transposed<-t(final) %>% data.frame()
coefficients <- final_transposed
time<-stringr::str_split(Sys.time()," ")[[1]][2]
filename <- paste0('results/',stringr::str_replace_all(time,":",""),'_150.RDS')
saveRDS(object=coefficients,file=as.character(filename))
# Plot Results -------------------------------------------------------------
files <- list.files(path = "results");lst = list()
for(fil in files){
df_i <- readRDS(paste0("results/",fil))
print(paste(fil,df_i$pos_coach..Intercept. %>% mean()))
lst[[fil]] <- df_i
}
boot <- dplyr::bind_rows(lst);coach<-data.frame(coef = boot$pos_coach..Intercept.,effect = 'Coach')
ggplot(coach,aes(x=coef,fill=effect))+
geom_density(alpha=.4)+theme_bw()+theme(legend.position = 'top')
print(paste('N samples =',length(coach$coef)))
rm(boot)
main_end <- Sys.time();print(main_end - main_start)
sample<-readRDS('~/GitHub/mixed_effects_bootstrapping/pbp_mut.RDS')
start_time <- Sys.time(); mixed_model<-sample %>%
lmer(formula=
epa ~
wp +
(1|def_coach) +
(1|def_coach:passer_player_id)+
(1|def_coach:POSC_rank)
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
);end_time <- Sys.time();end_time - start_time
f <- fixef(mixed_model)
r <- getME(mixed_model, "theta")
r
# Model -------------------------------------------------------------------
main_start <- Sys.time()
# index
setwd("~/GitHub/mixed_effects_bootstrapping/approach3/PosCoach")
rm(.Random.seed, envir=globalenv())
start_time <- Sys.time();indx <- sampler(sample, "def_coach", reps = 10);end_time <- Sys.time();(end_time - start_time)
# resample
start_time <- Sys.time(); resampled_data <- cbind(indx, sample[indx$RowID, ]);end_time <- Sys.time();print(end_time - start_time)
rm(indx)
clus <- makeCluster(4)
start_time <-Sys.time();clusterExport(clus, c("resampled_data", "f", "r"));end_time <- Sys.time();(end_time - start_time)
start_time <-Sys.time();clusterEvalQ(clus, require(lme4));end_time <- Sys.time();(end_time - start_time)
# Bootstrap function ------------------------------------------------------
boot_function <- function(i) {
simu <- try(
lmer(
formula=
epa ~
wp +
(1|def_coach) +
(1|def_coach:passer_player_id)+
(1|def_coach:POSC_rank)
,
data = resampled_data
,
subset = Replicate == i
,
control = lmerControl(optimizer = "nloptwrap", calc.derivs = FALSE,
optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE))
,
start = list(fixef = f, theta = r)
)
,
silent = TRUE)
if (class(simu) == "try-error")
return(simu)
c(fixef(simu), getME(simu, "theta"))
}
# Run bootstrap -----------------------------------------------------------
start <- Sys.time(); output <- parLapplyLB(clus, X = levels(resampled_data$Replicate), fun = boot_function); end <- Sys.time();(end-start)
#Success rate
success <- sapply(output, is.numeric)
mean(success)
#Stop cluster
stopCluster(clus)
rm(resampled_data)
# Get results -------------------------------------------------------------
final <- do.call(cbind, output[success])
final_transposed<-t(final) %>% data.frame()
coefficients <- final_transposed
time<-stringr::str_split(Sys.time()," ")[[1]][2]
filename <- paste0('results/',stringr::str_replace_all(time,":",""),'_150.RDS')
saveRDS(object=coefficients,file=as.character(filename))
# Plot Results -------------------------------------------------------------
files <- list.files(path = "results");lst = list()
for(fil in files){
df_i <- readRDS(paste0("results/",fil))
print(paste(fil,df_i$def_coach..Intercept. %>% mean()))
lst[[fil]] <- df_i
}
boot <- dplyr::bind_rows(lst);coach<-data.frame(coef = boot$def_coach..Intercept.,effect = 'Coach')
ggplot(coach,aes(x=coef,fill=effect))+
geom_density(alpha=.4)+theme_bw()+theme(legend.position = 'top')
print(paste('N samples =',length(coach$coef)))
rm(boot)
main_end <- Sys.time();print(main_end - main_start)
readRDS('~/GitHub/mixed_effects_bootstrapping/approach3pretty_plot_random.RDS')%>% ggplot(aes(x=coef,fill=effect))+
geom_density(alpha=.4)+
labs(
title = 'Measuring Impact'
)+
theme_bw()+
theme(
plot.title = element_text(hjust=0.5,size=18),
legend.position = 'top',
panel.grid.minor = element_blank() )+
coord_cartesian(ylim=c(0,200))
library(dplyr)
library(ggplot2)
library(ggthemes)
readRDS('~/GitHub/mixed_effects_bootstrapping/approach3pretty_plot_random.RDS')%>% ggplot(aes(x=coef,fill=effect))+
geom_density(alpha=.4)+
labs(
title = 'Measuring Impact'
)+
theme_bw()+
theme(
plot.title = element_text(hjust=0.5,size=18),
legend.position = 'top',
panel.grid.minor = element_blank() )+
coord_cartesian(ylim=c(0,200))
readRDS('~/GitHub/mixed_effects_bootstrapping/approach3/pretty_plot_random.RDS')%>% ggplot(aes(x=coef,fill=effect))+
geom_density(alpha=.4)+
labs(
title = 'Measuring Impact'
)+
theme_bw()+
theme(
plot.title = element_text(hjust=0.5,size=18),
legend.position = 'top',
panel.grid.minor = element_blank() )+
coord_cartesian(ylim=c(0,200))
